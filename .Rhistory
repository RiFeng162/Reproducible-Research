modelfit = train(Case ~ ., method = "rpart")
modelfit = train(Case ~ ., method = "rpart", data = data.train)
modelfit
plot(modelfit)
modelfit$finalModel
plot(modelfit$finalModel)
text(modelfit$finalModel, pretty = 0)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
dim(olive)
olive
names(olive)
fit3 = train(Area ~ ., method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
?colMeans
newdata
fit.pred = predict(fit3, newdata = newdata)
fit.pred
head(olive$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
names(SAheart)
summary(SAheart$chd)
head(SAheart$chd)
fit4 = train(chd ~ age + alcohol + obesity + tobacco + ldl + typea, method = "glm", family = "binomial", data = trainSA)
trainSA$chd = as.factor(trainSA$chd)
testSA$chd = as.factor(testSA$chd)
fit4 = train(chd ~ age + alcohol + obesity + tobacco + ldl + typea, method = "glm", data = trainSA)
fit4.pred = predict(fit4, newdata = testSA)
table(fit4.pred, test$chd)
table(fit4.pred, testSA$chd)
(34+38)/length(testSA$chd)
fit4
fit5 = train(chd ~ age + alcohol + obesity + tobacco + ldl + typea,
method = "glm", family = "binomial", data = trainSA)
fit5.pred = predict(fit5, newdata = testSA)
fit5
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, fit5)
missClass(trainSA$chd, fit5$pred)
missClass(testSA$chd, fit5$pred)
head(fit5.pred)
table(testSA$chd, fit5$pred)
fit5.pred = predict(fit5, newdata = testSA)
table(testSA$chd, fit5$pred)
summary(testSA$chd)
summary(fit5.pred)
table(testSA$chd, fit5.pred)
72/231
fit5.train = predict(fit5, newdata = trainSA)
table(trainSA$chd, fit5.train)
63/length(fit5.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.test)
vowel.test$y = as.factor(vowel.test$y)
vowel.train$y = as.factor(vowel.train$y)
library(randomForest)
fit6 = randomForest(y ~ ., data = vowel.train)
fit6
names(fit6)
summary(fit6)
fit6$importance
order(fit6$importance)
fit6$importance(order(fit6$importance))
fit6$importance[order(fit6$importance)]
row.names(fit6$importance[order(fit6$importance)])
fit6$importance
varImp(fit6)
so = segmentationOriginal
intrain = createDataPartition(so$Case)
training = so[intrain,]
intrain = createDataPartition(so$Case, list = F)
training = so[intrain,]
testing = so[-intrain,]
set.seed(125)
fit1 = train(Case ~ ., method = "rpart", data = training)
summary(fit1)
names(fit1)
fit1$finalModel
plot(fit1)
plot(fit1$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
so = segmentationOriginal
intrain = createDataPartition(so$Case, list = F)
training = so[intrain,]
testing = so[-intrain,]
set.seed(125)
fit1 = train(Case ~ ., method = "rpart", data = training)
plot(fit1$finalModel)
text(fit1$finalModel, pretty = 0)
)
text(fit1$finalModel)
fit1$method
summary(fit1)
fit1$finalModel
library(ISLR)
set.seed(1)
train = sample(392, 196)
lm.fit = lm(mpg ~ horsepower, data = Auto, subset = train)
attach(Auto)
mean((mpg - predict(lm.fit, newdata = Auto))[-train]^2)
mean((mpg - predict(lm.fit, Auto))[-train]^2)
mean((mpg - predict(lm.fit, horsepower))[-train]^2)
Auto = as.data.frame(Auto)
mean((mpg - predict(lm.fit, Auto))[-train]^2)
pred = predict(lm.fit, Auto)
length(pred)
mpg - predict(lm.fit, Auto)
head(mpg)
attach(Auto)
head(mpg)
?Auto
rm(list = ls())
library(ISLR)
set.seed(1)
train = sample(392, 196)
lm.fit = lm(mpg ~ horsepower, data = Auto, subset = train)
attach(Auto)
Auto = as.data.frame(Auto)
mean((mpg - predict(lm.fit, Auto))[-train]^2)
search()
?detach
detach(Auto)
search()
search()
detach(Auto)
search()
?poly
lm.fit2 = lm(mpg ~ poly(horsepower,2), data = Auto, subset = train)
mean((mpg - predict(lm.fit2, Auto))[-train]^2)
lm.fit3 = lm(mpg ~ poly(hosepower,3), data = Auto, subset = train)
lm.fit3 = lm(mpg ~ poly(horsepower,3), data = Auto, subset = train)
mean((mpg - predict(lm.fit3, Auto))[-train]^2)
a = c(1,2,3)
a[length(a)+1] = 4
a
library(boot)
?cv.glm
glm.fit = glm(mpg ~ horsepower, data = Auto)
cv.err = cv.glm(Auto,glm.fit)
summary(cv.err)
names(cv.err)
cv.error = rep(0,5)
cv.error
for (i in 1:5) {
glm.fit = glm(mpg ~ poly(horsepower,i), data = Auto)
cv.error[i] = cv.glm(Auto, glm.fit)$delta[1]
}
cv.error
set.seed(17)
cv.error.10 = rep(0,10)
cv.error.10[i] = cv.glm(Auto, glm.fit, K=10)$delta[1]
for (i in 1:10) {
glm.fit = glm(mpg ~ poly(horsepower,i), data = Auto)
cv.error.10[i] = cv.glm(Auto, glm.fit, K=10)$delta[1]
}
cv.error.10
?boot
alpha.fn = function(data, index) {
x = data$x[index]
y = data$y[index]
return((var(y)-cov(x,y))/(var(x)+var(y)-2*cov(x,y)))
}
?Portfolio
alpha.fn = function(data, index) {
X = data$x[index]
Y = data$y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha(Portfolio, 1:100)
alpha.fn = function(data, index) {
X = data$X[index]
Y = data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha(Portfolio, 1:100)
alpha.fn = function(data, index) {
X = data$X[index]
Y = data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(Portfolio, 1:100)
alpha.fn(Portfolio, sample(100, 100, replace = T))
boot(Portfolio, alpha.fn, R = 1000)
boot.fn = function(data, index) return(coef(lm(mpg ~ horsepower, data = data, subset = index)))
boot.fn(Auto, 1:392)
set.seed(1)
boot.fn(Auto, sample(392, 392, replace = T))
boot.fn(Auto, sample(392, 392, replace = T))
boot(data = Auto, statistic = boot.fn, R = 1000)
fit = lm(Ozone ~ Wind + Temp + Solar.R, data = airquality)
summary(fit)
xtable(summary(fit))
install.packages("xtable")
library(xtable)
getwd()
setwd("~/Library/Containers/MicVPN/")
getwd()
?tempfile
tempfile(c("ab", "a b c"))
?unlink
?download.file
knitr::opts_chunk$set(echo = TRUE)
temp = tempfile()
download.file("https://www.coursera.org/learn/reproducible-research/peer/gYyPt/course-project-1",temp)
raw.data = read.csv(temp)
file.exists(temp)
?read.csv
data = read.table(temp)
data = read.table(temp, sep = ",")
data = read.csv(temp)
data = read.csv(temp,row.names = NULL)
head(data)
temp = tempfile()
download.file("https://www.coursera.org/learn/reproducible-research/peer/gYyPt/course-project-1",temp)
raw.data = read.csv(temp, row.names = NULL)
unlink(temp)
head(raw.data)
summary(raw.data)
temp
getwd()
setwd("DataScience/Reproducible Research/")
download.file("https://www.coursera.org/learn/reproducible-research/peer/gYyPt/course-project-1", "ActivityData")
data = read.csv("ActivityData")
data = read.csv("ActivityData", row.names = NULL)
head(data)
download.file("https://www.coursera.org/learn/reproducible-research/peer/gYyPt/course-project-1", "ActivityData", method = "curl")
download.file("https://www.coursera.org/learn/reproducible-research/peer/gYyPt/course-project-1", "ActivityData.csv", method = "curl")
download.file("https://www.coursera.org/learn/reproducible-research/peer/gYyPt/course-project-1", "ActivityData.csv")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", temp)
data = read.csv(temp)
temp1 = unz(temp, "activity.csv")
temp1
data = read.csv(temp1)
head(data)
temp = tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
temp = tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
raw.data = read.csv(unz(temp,"activity.csv"))
unlink(temp)
summary(raw.data)
str(raw.data)
xtable(str(raw.data))
library(xtable)
xtable(str(raw.data))
names(raw.data)
nrow(raw.data)
library(ggplot2)
data.dsum = with(raw.data, tapply(steps, data, sum, na.rm = TRUE))
head(data.dsum)
data.dsum = with(raw.data, tapply(steps, date, sum, na.rm = TRUE))
head(data.dsum)
str(data.dsum)
dat = as.data.frame(data.dsum)
head(dat)
dat.1 = as.data.frame(data.dsum, col.names = "TotalSteps")
head(dat.1)
row.names(dat.1)
ggplot(dat.1, aes(x = row.names(dat.1))) + geom_histogram()
ggplot(dat.1, aes(x = row.names(dat.1))) + geom_histogram(stat = "count")
d <- ggplot(diamonds, aes(x, y)) + xlim(4, 10) + ylim(4, 10)
d + geom_bin2d()
ggplot(mpg, aes(cty, hwy)) +
geom_point()
g <- ggplot(mpg, aes(class))
# Number of cars in each class:
g + geom_bar()
# Total engine displacement of each class
g + geom_bar(aes(weight = displ))
head(mpg)
head(mpg$class)
g <- ggplot(mpg, aes(class))
# Number of cars in each class:
g + geom_bar()
by(raw.data, date, sum)
temp = aggregate(raw.data$steps, by = list(raw.data$date),sum)
head(temp)
rdat = raw.data
dat.cplt = rdat[complete.cases(rdat),]
str(dat.cplt)
TotalSteps = with(dat.cplt, aggregate(steps, by = list(date)))
TotalSteps = with(dat.cplt, aggregate(steps, by = list(date),sum))
head(TotalSteps)
names(TotalSteps) = c("Time", "tSteps")
head(TotalSteps)
ggplot(TotalSteps, aes(x = Time, y = tSteps)) + geom_col()
ggplot(TotalSteps, aes(x = as.Date(Time), y = tSteps)) + geom_col()
ggplot(TotalSteps, aes(x = as.Date(Time), y = tSteps)) + geom_col() + labs(x = "Time", y = "Total Steps", title = "Histogram of Steps Each Day"")
ggplot(TotalSteps, aes(x = as.Date(Time), y = tSteps)) + geom_col() + labs(x = "Time", y = "Total Steps", title = "Histogram of Steps Each Day")
ggplot(TotalSteps, aes(x = as.Date(Time), y = tSteps)) + geom_col() + labs(x = "Time", y = "Total Steps")
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
sMean = with(TotalSteps,mean(tSteps))
sMean
round(sMean)
sMedian = with(TotalSteps, median(tSteps))
sMedian
names(rdat)
AvgItv = with(rdat, aggregate(steps, by = list(interval), mean))
head(AvgItv)
AvgItv = with(dat.cplt, aggregate(steps, by = list(interval), mean))
head(AvgItv)
range(AvgItv)
nrow(AvgItv)
b <- ggplot(mtcars, aes(wt, mpg)) +
geom_point()
df <- data.frame(x1 = 2.62, x2 = 3.57, y1 = 21.0, y2 = 15.0)
b +
geom_curve(aes(x = x1, y = y1, xend = x2, yend = y2, colour = "curve"), data = df) +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2, colour = "segment"), data = df)
ggplot(AvgItv, aes(x = Interval, y = AvgStpes)) + geom_segment()
names(AvgItv) = c("Interval", "AvgSteps")
ggplot(AvgItv, aes(x = Interval, y = AvgStpes)) + geom_segment()
ggplot(AvgItv, aes(x = Interval, y = AvgSteps)) + geom_segment()
ggplot(AvgItv, aes(x = Interval, y = AvgSteps)) + geom_line(linetype = "solid")
x <- c(1:4, 0:5, 11)
which.min(x)
x
AvgItv[which.max(AvgItv$AvgSteps),]
ggplot(AvgItv, aes(x = Interval, y = AvgSteps)) + geom_line(linetype = "solid")
ggplot(AvgItv, aes(x = Interval, y = AvgSteps)) + geom_line(linetype = "solid") + ylabs("Average Steps")
ggplot(AvgItv, aes(x = Interval, y = AvgSteps)) + geom_line(linetype = "solid") + ylab("Average Steps")
tail(rdat)
names(AvgItv)
p1 = mean(AvgItv[AvgItv$Interval<500,"AvgSteps"])
p1
temp = rdat["steps" is NA]
temp = rdat["steps" %is% NA]
if (1) {print("happy")}
if (0) {print("happy")} elseif {print("not happy")}
cdat = rdat
p1 = mean(AvgItv[AvgItv$Interval<500,"AvgSteps"])
p2 = mean(AvgItv[500<=AvgItv$Interval<780,"AvgSteps"])
p2 = mean(AvgItv[500 <= AvgItv$Interval<780,"AvgSteps"])
p2 = mean(AvgItv[AvgItv$Interval>=500 & AvgItv$Interval<780,"AvgSteps"])
p2
p5 = mean(2200<=AvgItv[AvgItv$Interval,"AvgSteps"])
p1 = mean(AvgItv[AvgItv$Interval<500,"AvgSteps"])
p2 = mean(AvgItv[AvgItv$Interval>=500 & AvgItv$Interval<780,"AvgSteps"])
p3 = mean(AvgItv$Interval>=780 & AvgItv[AvgItv$Interval<880,"AvgSteps"])
p4 = mean(AvgItv$Interval>=880 & AvgItv[AvgItv$Interval<2200,"AvgSteps"])
p5 = mean(2200<=AvgItv[AvgItv$Interval,"AvgSteps"])
cdat = rdat
if (is.na(cdat$steps)) {
if (cdat$interval<500) cdat$steps = p1
else if (500<=cdat$interval & cdat$interval<780) cdat$steps = p2
else if (780<=cdat$interval & cdat$interval<880) cdat$steps = p3
else if (880<=cdat$interval & cdat$interval<2200) cdat$steps = p4
else (2200<=cdat$interval) cdat$steps = p5
880<=cdat$interval & cdat$interval<2200
if (is.na(cdat$steps)) {
if (cdat$interval<500) cdat$steps = p1
else if (500<=cdat$interval & cdat$interval<780) cdat$steps = p2
else if (780<=cdat$interval & cdat$interval<880) cdat$steps = p3
else if (880<=cdat$interval & cdat$interval<2200) cdat$steps = p4
else (2200<=cdat$interval) cdat$steps = p5
p1
p2
p3
p1 = mean(AvgItv[AvgItv$Interval<500,"AvgSteps"])
p2 = mean(AvgItv[AvgItv$Interval>=500 & AvgItv$Interval<780,"AvgSteps"])
p3 = mean(AvgItv[AvgItv$Interval>=780 & AvgItv$Interval<880,"AvgSteps"])
p4 = mean(AvgItv[AvgItv$Interval>=880 & AvgItv$Interval<2200,"AvgSteps"])
p5 = mean(AvgItv[2200<=AvgItv$Interval,"AvgSteps"])
cdat = rdat
if (is.na(cdat$steps)) {
if (cdat$interval<500) cdat$steps = p1
else if (500<=cdat$interval & cdat$interval<780) cdat$steps = p2
else if (780<=cdat$interval & cdat$interval<880) cdat$steps = p3
else if (880<=cdat$interval & cdat$interval<2200) cdat$steps = p4
else (2200<=cdat$interval) cdat$steps = p5
head(cdat)
if (cdat$interval<500) cdat$steps = p1
cdat[cdat$interval<500 & is.na(cdat$steps), cdat$steps] = p1
cdat[cdat$interval<500 & is.na(cdat$steps), "steps"] = p1
p1 = mean(AvgItv[AvgItv$Interval<500,"AvgSteps"])
p2 = mean(AvgItv[AvgItv$Interval>=500 & AvgItv$Interval<780,"AvgSteps"])
p3 = mean(AvgItv[AvgItv$Interval>=780 & AvgItv$Interval<880,"AvgSteps"])
p4 = mean(AvgItv[AvgItv$Interval>=880 & AvgItv$Interval<2200,"AvgSteps"])
p5 = mean(AvgItv[2200<=AvgItv$Interval,"AvgSteps"])
cdat = rdat
cdat[is.na(cdat$steps) & cdat$interval<500, "steps"] = p1
cdat[is.na(cdat$steps) & 500<=cdat$interval & cdat$interval<780, "steps"] = p2
cdat[is.na(cdat$steps) & (780<=cdat$interval & cdat$interval<880), "steps"] = p3
cdat[is.na(cdat$steps) & (880<=cdat$interval & cdat$interval<2200), "steps"] = p4
cdat[is.na(cdat$steps) & 2200<=cdat$interval), "steps"] = p5
p1 = mean(AvgItv[AvgItv$Interval<500,"AvgSteps"])
p2 = mean(AvgItv[AvgItv$Interval>=500 & AvgItv$Interval<780,"AvgSteps"])
p3 = mean(AvgItv[AvgItv$Interval>=780 & AvgItv$Interval<880,"AvgSteps"])
p4 = mean(AvgItv[AvgItv$Interval>=880 & AvgItv$Interval<2200,"AvgSteps"])
p5 = mean(AvgItv[2200<=AvgItv$Interval,"AvgSteps"])
cdat = rdat
cdat[is.na(cdat$steps) & cdat$interval<500, "steps"] = p1
cdat[is.na(cdat$steps) & 500<=cdat$interval & cdat$interval<780, "steps"] = p2
cdat[is.na(cdat$steps) & (780<=cdat$interval & cdat$interval<880), "steps"] = p3
cdat[is.na(cdat$steps) & (880<=cdat$interval & cdat$interval<2200), "steps"] = p4
cdat[is.na(cdat$steps) & 2200<=cdat$interval), "steps"] = p5
cdat[is.na(cdat$steps) & 2200<=cdat$interval, "steps"] = p5
p1 = mean(AvgItv[AvgItv$Interval<500,"AvgSteps"])
p2 = mean(AvgItv[AvgItv$Interval>=500 & AvgItv$Interval<780,"AvgSteps"])
p3 = mean(AvgItv[AvgItv$Interval>=780 & AvgItv$Interval<880,"AvgSteps"])
p4 = mean(AvgItv[AvgItv$Interval>=880 & AvgItv$Interval<2200,"AvgSteps"])
p5 = mean(AvgItv[2200<=AvgItv$Interval,"AvgSteps"])
cdat = rdat
cdat[is.na(cdat$steps) & cdat$interval<500, "steps"] = p1
cdat[is.na(cdat$steps) & 500<=cdat$interval & cdat$interval<780, "steps"] = p2
cdat[is.na(cdat$steps) & (780<=cdat$interval & cdat$interval<880), "steps"] = p3
cdat[is.na(cdat$steps) & (880<=cdat$interval & cdat$interval<2200), "steps"] = p4
cdat[is.na(cdat$steps) & 2200<=cdat$interval, "steps"] = p5
summary(cdat)
summary(rdat)
sum(is.na(cdat$steps))
p1
p2
p3
p4
p5
names(cdat)
cTotalSteps = with(cdat, aggregate(steps, by = list(date), sum))
head(cTotalSteps)
+ labs(x = "Time", y = "Total Steps", title = "Steps on Each Day with NA Removed")
+ labs(x = "Time", y = "Total Steps")
ggplot(cTotalSteps, aes(x = as.Date(Time), y = tSteps))
cTotalSteps = with(cdat, aggregate(steps, by = list(date), sum))
names(cTotalSteps) = c("Time", "tSteps")
ggplot(cTotalSteps, aes(x = as.Date(Time), y = tSteps))
+ geom_col()
ggplot(cTotalSteps, aes(x = as.Date(Time), y = tSteps)) + geom_col()
head(cdat)
ggplot(cTotalSteps, aes(x = as.Date(Time), y = tSteps)) + geom_col() + labs(x = "Time")
ggplot(cTotalSteps, aes(x = as.Date(Time), y = tSteps)) + geom_col() + labs(x = "Time", y = "Total Steps",)
ggplot(cTotalSteps, aes(x = as.Date(Time), y = tSteps)) + geom_col() + labs(x = "Time", y = "Total Steps")
ggplot(cTotalSteps, aes(x = as.Date(Time), y = tSteps)) + geom_col() + labs(x = "Time", y = "Total Steps", title = "Total Steps on Each Day with NA Removed")
library(lubridate)
wday(ymd(080101))
wday(ymd(080101), label = TRUE, abbr = FALSE)
wday(ymd(080101), label = TRUE, abbr = TRUE)
wday(ymd(080101) + days(-2:4), label = TRUE, abbr = TRUE)
days(-2:4)
summary(cdat)
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(lubridate)
cdat$weekday = wday(cdat$date, Lable = FALSE)
cdat$weekday = wday(cdat$date, lable = FALSE)
cdat$weekday = wday(cdat$date, label = FALSE)
head(cdat)
cdat$weekday = wday(cdat$date, label = TRUE)
head(cdat)
cdat$weekday = wday(cdat$date, label = F)
cdat[cdat$weekday %in% c(2:6),"weekday"] = "weekday"
cdat[cdat$weekday %in% c(1,7),"weekday"] = "weekend"
head(cdat)
weekdays = with(cdat[cdat$weekday == "weekday"], aggregate(steps, by = list(interval), mean))
weekdays = with(cdat[cdat$weekday == "weekday",], aggregate(steps, by = list(interval), mean))
weekends = with(cdat[cdat$weekday == "weekend",], aggregate(steps, by = list(interval), mean))
head(weekdays)
head(weekends)
label date
install.packages("easyGgplot2")
wdat = rbind(weekdays, weekends)
wdat = with(cdat, aggregate(steps, by = list(interval, weekday), mean))
head(wdat)
# label date
cdat$weekday = wday(cdat$date, label = F)
cdat[cdat$weekday %in% c(2:6),"weekday"] = "weekday"
cdat[cdat$weekday %in% c(1,7),"weekday"] = "weekend"
# prepare dataset
weekdays = with(cdat[cdat$weekday == "weekday",], aggregate(steps, by = list(interval), mean))
names(weekdays) = c("Interval", "AvgSteps")
weekends = with(cdat[cdat$weekday == "weekend",], aggregate(steps, by = list(interval), mean))
names(weekends) = c("Interval", "AvgSteps")
wdat = rbind(weekdays, weekends)
wdat = with(cdat, aggregate(steps, by = list(interval, weekday), mean))
# draw plots
ggplot()
names(wdat) = c("interval", "weekday", "steps")
ggplot(mpg, aes(displ, cty)) + geom_point()
p <- ggplot(mpg, aes(displ, cty)) + geom_point()
p + facet_grid(. ~ cyl)
p + facet_grid(drv ~ .)
p + facet_grid(drv ~ cyl)
p + facet_grid(drv ~ .)
ggplot(wdat, aes(x = interval, y = steps)) + geom_line() + facet_grid(weekday ~.)
ggplot(wdat, aes(x = interval, y = steps)) + geom_line() + facet_grid(weekday ~.)
wdat = with(cdat, aggregate(steps, by = list(interval, weekday), mean))
names(wdat) = c("interval", "weekday", "steps")
ggplot(wdat, aes(x = interval, y = steps)) + geom_line() + facet_grid(weekday ~.)
ggplot(wdat, aes(x = interval, y = steps)) + geom_line() + facet_grid(weekday ~.) + labs(x = "Interval", y = "Average Steps", title = "Panel Plots Comparing Weekdays and Weekends")
sMean
round(sMean)
